
# Clustering


# load the data into R
movies = read.table(file.choose(), header=FALSE, sep="|",quote="\"")

# Look at the structure of the data
head(movies)
str(movies)
summary(movies)
describe(movies)

# Add column names as shown in Movielens website
colnames(movies) = c("ID", "Title", "ReleaseDate", "VideoReleaseDate", "IMDB", "Unknown", "Action", "Adventure", "Animation", "Childrens", "Comedy", "Crime", "Documentary", "Drama", "Fantasy", "FilmNoir", "Horror", "Musical", "Mystery", "Romance", "SciFi", "Thriller", "War", "Western")

str(movies)

# Remove unnecessary variables
movies$ID = NULL
movies$ReleaseDate = NULL
movies$VideoReleaseDate = NULL
movies$IMDB = NULL

# Remove duplicates
movies = unique(movies)

# Take a look at our data again:
str(movies)

# No. of movies under few of the genres
comedy <- movies$Comedy == 1
sum(comedy[comedy == TRUE])

western <- movies$Western == 1
sum(western[western == TRUE])

# Another way to count
rom_drama <- subset(movies,(movies$Romance == 1) & (movies$Drama == 1))
nrow(rom_drama)

#No. of columns in the data frame
length(rom_drama)
ncol(rom_drama)

names(movies)

# Compute distances taking 2nd to 20th columns of the data
distances = dist(movies[2:20], method = "euclidean")
summary(distances)
distances[1:10]
# Hierarchical clustering
?hclust #hclust(d, method = "complete", members = NULL
# method:	the agglomeration method to bWard's minimum variance method aims at finding compact, spherical clustere used. This should be (an unambiguous abbreviation of) one of "ward.D", "ward.D2", "single", "complete", "average" (= UPGMA), "mcquitty" (= WPGMA), "median" (= WPGMC) or "centroid" (= UPGMC).
# Ward's minimum variance method aims at finding compact, spherical cluster
clusterMovies = hclust(distances, method = "ward.D") 

# Plot the dendrogram
plot(clusterMovies)

# Divide into 10 clusters and assign points to clusters
clusterGroups = cutree(clusterMovies, k = 10)

#Now let's figure out what the clusters are like.

# Let's use the tapply function to compute the percentage of movies in each genre and cluster

tapply(movies$Action, clusterGroups, mean)
tapply(movies$Romance, clusterGroups, mean)

# We can repeat this for each genre. 


# Find which cluster Men in Black is in.

subset(movies, Title=="Men in Black (1997)")
clusterGroups[257]

# Create a new data set with just the movies from cluster 2
cluster2 = subset(movies, clusterGroups==2)

# Look at the first 10 titles in this cluster:
cluster2$Title[1:10]

# Divide the data into 2 clusters 
clusterTwoGroups = cutree(clusterMovies, k = 2)

# tapply function -> to be used when factors come into play. Below funcation finds the % of movies in the genres
tapply(movies$Action, clusterTwoGroups, mean)

# Finding the row no.of Men in Black movie
subset(movies, Title=="Men in Black (1997)")

# Find which cluster Men in Black belongs to
clusterTwoGroups[257]

# Create a subset of movies classified in Cluster 2
cluster2 = subset(movies, clusterTwoGroups==2)

# Look at the 1st 10 titles in Cluster 2
cluster2$Title[1:10]
subset(movies,Title == "Dead Man Walking (1995)")


